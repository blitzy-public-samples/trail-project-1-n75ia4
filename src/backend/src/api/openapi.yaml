openapi: 3.0.0
info:
  title: Task Management System API
  version: 1.0.0
  description: |
    Enterprise-grade REST API for Task Management System with comprehensive security,
    monitoring, and collaboration features.
  contact:
    name: Development Team
    email: dev-team@example.com
  license:
    name: Proprietary
    url: https://example.com/license

servers:
  - url: /api/v1
    description: API version 1

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Projects
    description: Project management operations
  - name: Tasks
    description: Task management operations
  - name: Users
    description: User management operations
  - name: System
    description: System health and monitoring endpoints

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: Authenticate user
      description: Authenticates user and returns JWT tokens
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'

  /auth/register:
    post:
      tags: [Authentication]
      summary: Register new user
      description: Creates new user account with validation
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /projects:
    get:
      tags: [Projects]
      summary: List projects
      description: Retrieves paginated list of projects with filtering
      operationId: getProjects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [PLANNED, IN_PROGRESS, ON_HOLD, COMPLETED, CANCELLED]
        - name: priority
          in: query
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH, CRITICAL]
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags: [Projects]
      summary: Create project
      description: Creates new project with validation
      operationId: createProject
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /tasks:
    get:
      tags: [Tasks]
      summary: List tasks
      description: Retrieves paginated list of tasks with filtering
      operationId: getTasks
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SortOrderParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [TODO, IN_PROGRESS, REVIEW, DONE]
        - name: priority
          in: query
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH]
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags: [Tasks]
      summary: Create task
      description: Creates new task with validation
      operationId: createTask
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: Password123!

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          format: int32
          example: 3600

    CreateProjectRequest:
      type: object
      required:
        - name
        - description
        - priority
        - startDate
        - endDate
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          minLength: 10
          maxLength: 2000
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        teamMembers:
          type: array
          items:
            type: string
            format: uuid

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        correlationId:
          type: string
          format: uuid

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page

  responses:
    UnauthorizedError:
      description: Authentication required or failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TooManyRequestsError:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Time in seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'